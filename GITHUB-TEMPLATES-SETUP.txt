╔══════════════════════════════════════════════════════════════════════════╗
║                                                                          ║
║              📋 GITHUB ISSUE TEMPLATES SETUP GUIDE 📋                   ║
║                                                                          ║
║         Professional Issue & PR Templates for Your Repository           ║
║                                                                          ║
╚══════════════════════════════════════════════════════════════════════════╝


═══════════════════════════════════════════════════════════════════════════
  WHAT YOU'VE GOT
═══════════════════════════════════════════════════════════════════════════

I've created a complete set of GitHub templates:

📁 .github/ISSUE_TEMPLATE/
   ├── bug_report.md           ← Bug reporting template
   ├── feature_request.md      ← Feature suggestion template
   ├── question.md             ← Help/support template
   ├── share_config.md         ← Custom config sharing template
   └── config.yml              ← Issue template configuration

📁 .github/
   └── PULL_REQUEST_TEMPLATE.md  ← Pull request template

📁 .github/workflows/
   └── validate.yml            ← Automated testing workflow


═══════════════════════════════════════════════════════════════════════════
  STEP 1: ADD TO YOUR REPOSITORY
═══════════════════════════════════════════════════════════════════════════

1. In your local repository folder, create the .github structure:

   mkdir -p .github/ISSUE_TEMPLATE
   mkdir -p .github/workflows

2. Copy all the template files to the correct locations:

   .github/
   ├── ISSUE_TEMPLATE/
   │   ├── bug_report.md
   │   ├── feature_request.md
   │   ├── question.md
   │   ├── share_config.md
   │   └── config.yml
   ├── PULL_REQUEST_TEMPLATE.md
   └── workflows/
       └── validate.yml

3. Commit and push:

   git add .github/
   git commit -m "Add issue templates and PR template"
   git push origin main


═══════════════════════════════════════════════════════════════════════════
  STEP 2: VERIFY TEMPLATES ARE WORKING
═══════════════════════════════════════════════════════════════════════════

After pushing to GitHub:

1. Go to your repository on GitHub
2. Click "Issues" tab
3. Click "New Issue" button
4. You should see your custom templates:

   🐛 Bug Report
   💡 Feature Request  
   ❓ Question or Help
   🎨 Share Custom Configuration

5. Click any template to test it loads correctly


═══════════════════════════════════════════════════════════════════════════
  WHAT EACH TEMPLATE DOES
═══════════════════════════════════════════════════════════════════════════

🐛 Bug Report (bug_report.md)
   ├── Structured format for reporting problems
   ├── Collects: Steps to reproduce, environment, screenshots
   ├── Auto-labels as "bug"
   └── Includes troubleshooting checklist

💡 Feature Request (feature_request.md)
   ├── Format for suggesting new commands or improvements
   ├── Collects: Command ID, suggested page/position, use case
   ├── Auto-labels as "enhancement"
   └── Helps prioritize based on frequency of use

❓ Question or Help (question.md)
   ├── Simple format for asking questions
   ├── Collects: What they tried, current setup
   ├── Auto-labels as "question"
   └── Encourages checking docs first

🎨 Share Custom Configuration (share_config.md)
   ├── Format for community members to share custom configs
   ├── Collects: JSON configuration, use case, screenshots
   ├── Auto-labels as "custom-config"
   └── Builds a library of community configurations

📝 Pull Request Template (PULL_REQUEST_TEMPLATE.md)
   ├── Appears when someone creates a PR
   ├── Ensures PR includes: Description, tests, screenshots
   └── Maintains code quality standards

⚙️ Config.yml
   ├── Disables blank issues (forces template use)
   ├── Adds helpful links to documentation
   └── Directs users to appropriate resources

🔄 Validate Workflow (validate.yml)
   ├── Runs automatically on every push/PR
   ├── Validates JSON configuration files
   ├── Tests Python scripts execute
   └── Checks all required files exist


═══════════════════════════════════════════════════════════════════════════
  STEP 3: ENABLE GITHUB FEATURES
═══════════════════════════════════════════════════════════════════════════

To get the most from your templates:

1. **Enable Issues** (if not already)
   Repository → Settings → Features → ✅ Issues

2. **Enable Discussions** (recommended)
   Repository → Settings → Features → ✅ Discussions
   └── Great for Q&A and community interaction

3. **Add Issue Labels**
   Repository → Issues → Labels → Create:
   
   Name: bug              Color: #d73a4a (red)
   Name: enhancement      Color: #a2eeef (blue)
   Name: question         Color: #d876e3 (purple)
   Name: custom-config    Color: #0075ca (blue)
   Name: documentation    Color: #0075ca (blue)
   Name: good first issue Color: #7057ff (purple)
   Name: help wanted      Color: #008672 (green)

4. **Set Up Milestones** (optional)
   Repository → Issues → Milestones → Create:
   - v1.1 - Additional Commands
   - v2.0 - Multi-Layout Support
   - Documentation Improvements


═══════════════════════════════════════════════════════════════════════════
  STEP 4: CUSTOMIZE (OPTIONAL)
═══════════════════════════════════════════════════════════════════════════

Edit the templates to match your preferences:

1. Change auto-assigned labels
2. Add/remove sections
3. Modify checklist items
4. Add default assignees (set to your username)
5. Update contact links in config.yml


═══════════════════════════════════════════════════════════════════════════
  USING THE GITHUB ACTIONS WORKFLOW
═══════════════════════════════════════════════════════════════════════════

The validate.yml workflow will:

✅ Run automatically on every push to main
✅ Run automatically on every pull request
✅ Validate JSON files are properly formatted
✅ Check all required files exist
✅ Test Python scripts execute without errors

To view workflow runs:
1. Go to your repository
2. Click "Actions" tab
3. See all workflow runs and their status

If a workflow fails:
- Click on the failed run
- Click on the failed job
- View the error details
- Fix the issue and push again


═══════════════════════════════════════════════════════════════════════════
  TESTING YOUR TEMPLATES
═══════════════════════════════════════════════════════════════════════════

1. Create a Test Issue:
   - Go to Issues → New Issue
   - Select "Bug Report"
   - Fill it out completely
   - Submit
   - Verify it looks good
   - Close the issue (was just a test)

2. Test Each Template:
   - Repeat for Feature Request, Question, Share Config
   - Check formatting, labels, all fields present

3. Test PR Template:
   - Create a test branch
   - Make a small change
   - Create pull request
   - Verify template appears
   - Close without merging (was just a test)


═══════════════════════════════════════════════════════════════════════════
  MANAGING ISSUES
═══════════════════════════════════════════════════════════════════════════

When someone creates an issue:

1. **Respond Quickly** (within 24-48 hours)
   - Thank them for reporting
   - Ask clarifying questions if needed
   - Provide initial feedback

2. **Label Appropriately**
   - Add additional labels as needed
   - Add to milestone if applicable
   - Assign to yourself if you'll work on it

3. **Use Templates for Replies**
   GitHub Saved Replies feature:
   - Settings → Saved Replies
   - Create templates for common responses

4. **Close When Resolved**
   - Comment with solution
   - Close the issue
   - Link to PR if applicable


═══════════════════════════════════════════════════════════════════════════
  COMMUNITY MANAGEMENT TIPS
═══════════════════════════════════════════════════════════════════════════

✅ Be welcoming to first-time contributors
✅ Respond to questions even if you can't solve immediately  
✅ Use "good first issue" label for easy contributions
✅ Acknowledge feature requests even if you won't implement
✅ Keep issues organized with labels and milestones
✅ Close stale issues after 30+ days of inactivity


═══════════════════════════════════════════════════════════════════════════
  EXAMPLE ISSUE RESPONSES
═══════════════════════════════════════════════════════════════════════════

For Bug Reports:
"Thanks for the detailed bug report! I'll investigate this and get back to 
you within 48 hours. In the meantime, have you tried [workaround]?"

For Feature Requests:
"Great idea! This would definitely improve the workflow for [use case]. 
I'll add this to the roadmap for v1.1. Would you be interested in 
contributing this feature yourself?"

For Questions:
"Thanks for asking! The answer is in [section of docs], but I can see 
how that wasn't clear. Let me know if that helps, and I'll improve the 
documentation to make it clearer."

For Custom Configs:
"Awesome configuration! This is really useful for [use case]. I'll add 
this to our community configurations section. Would you be willing to 
write a quick blog post about your workflow?"


═══════════════════════════════════════════════════════════════════════════
  TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════════

❌ Templates not showing up
   → Make sure files are in .github/ISSUE_TEMPLATE/ folder
   → Check file names match exactly (bug_report.md not bug-report.md)
   → Verify YAML front matter is valid

❌ GitHub Actions workflow failing
   → Check the Actions tab for error details
   → Make sure all JSON files are valid
   → Verify Python scripts have no syntax errors

❌ PR template not appearing
   → File must be named PULL_REQUEST_TEMPLATE.md (exact case)
   → Must be in .github/ folder (not ISSUE_TEMPLATE/)
   → Push to main branch and try creating a new PR


═══════════════════════════════════════════════════════════════════════════
  COMPLETE COMMANDS TO ADD TEMPLATES
═══════════════════════════════════════════════════════════════════════════

# Navigate to your repository
cd vscode-streamdeck-ultimate

# Copy the .github folder from your downloads
# (assuming you downloaded all files to a 'downloads' folder)
cp -r downloads/.github .

# OR create manually and copy files one by one
mkdir -p .github/ISSUE_TEMPLATE
mkdir -p .github/workflows

# Then copy individual files...

# Add to git
git add .github/

# Commit
git commit -m "Add issue templates, PR template, and validation workflow"

# Push to GitHub
git push origin main


═══════════════════════════════════════════════════════════════════════════
  VERIFICATION CHECKLIST
═══════════════════════════════════════════════════════════════════════════

After pushing, verify:

□ Go to repository on GitHub
□ Click "Issues" → "New Issue"
□ See 4 template options
□ Click each template to verify it loads
□ Click "Actions" tab
□ See "Validate Configuration" workflow
□ Workflow shows green checkmark (passed)
□ Create a test issue to verify labels apply
□ Start a test PR to verify PR template appears


═══════════════════════════════════════════════════════════════════════════
  YOU'RE ALL SET!
═══════════════════════════════════════════════════════════════════════════

Your repository now has:

✅ Professional issue templates
✅ Pull request template
✅ Automated validation
✅ Helpful contact links
✅ Community contribution framework

This will make managing contributions much easier and encourage
high-quality bug reports and feature requests!


═══════════════════════════════════════════════════════════════════════════
